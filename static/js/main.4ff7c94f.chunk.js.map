{"version":3,"sources":["components/LinkMenuItem.js","components/Navigation.js","pages/aboutMe.js","pages/landing.js","components/PriceEstimator.js","components/GoogleMapsAutoComplete.js","pages/gasMoney.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["withRouter","props","history","to","location","match","staticContext","onClick","rest","MenuItem","event","push","Navigation","handleMenu","setState","anchorElement","currentTarget","isNavOpen","handleClose","handleNav","page","state","classes","this","className","root","AppBar","position","Toolbar","IconButton","edge","menuButton","color","aria-label","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","open","onClose","Typography","variant","title","React","Component","withStyles","theme","flexGrow","marginRight","spacing","Landing","PriceEstimator","calculateCost","directions","response","cost","miles","routes","legs","distance","value","toFixed","time","duration","parseInt","directionsCallback","newResponse","status","console","log","AfterDirectionFetch","from","showMap","text","id","center","lat","lng","long","zoom","mapContainerStyle","width","height","options","destination","origin","travelMode","callback","autocompleteService","current","useStyles","makeStyles","icon","palette","secondary","GoogleMapsAutoComplete","useState","inputValue","setInputValue","setOptions","createRef","window","google","maps","places","AutocompleteService","handleChange","target","fetch","useMemo","throttle","input","getPlacePredictions","useEffect","active","results","optionDict","map","option","place_id","description","structured_formatting","Autocomplete","label","getOptionLabel","debug","freeSolo","style","onChange","newValue","onOptionSelect","renderInput","params","TextField","fullWidth","renderOption","index","matches","main_text_matched_substrings","parts","parse","main_text","offset","length","Grid","container","alignItems","item","xs","part","key","fontWeight","highlight","secondary_text","GasMoney","getLocation","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","updateMap","fromLoc","toLoc","org","dest","afterDirections","setFrom","newVal","setFromCoords","place","requestUrl","then","json","data","result","geometry","catch","error","setTo","setToCoords","componentDidMount","document","querySelector","handleSubmit","undefined","preventDefault","Paper","Container","maxWidth","stlye","textAlign","Card","Button","size","App","googleMapsApiKey","libraries","exact","path","component","aboutMe","Boolean","hostname","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4ff7c94f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withRouter } from 'react-router'\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst LinkMenuItem = (props) => {\r\n    const {\r\n    history,\r\n    location,\r\n    match,\r\n    staticContext,\r\n    to,\r\n    onClick,\r\n    // ⬆ filtering out props that `button` doesn’t know what to do with.\r\n    ...rest\r\n  } = props\r\n  return (\r\n      <MenuItem {...rest} onClick={(event) => {\r\n      onClick && onClick(event)\r\n      history.push(to)\r\n  }} />\r\n  )\r\n}\r\n\r\nLinkMenuItem.propTypes = {\r\n    to: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired\r\n}\r\n\r\nexport default withRouter(LinkMenuItem)","//@flow\r\n\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport LinkMenuItem from './LinkMenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\ntype State = {\r\n    isNavOpen: boolean,\r\n    anchorElement: string | any,\r\n}\r\n\r\ntype Props = {\r\n    classes?: any,\r\n    history: Array<any>,\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n});\r\n\r\nclass Navigation extends React.Component<Props, State> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isNavOpen: false,\r\n            anchorElement: null,\r\n        };\r\n    }\r\n    handleMenu = (event) => {\r\n        this.setState({anchorElement: event.currentTarget, isNavOpen: true});\r\n    }\r\n    handleClose = () => {\r\n        this.setState({anchorElement: null, isNavOpen: false});\r\n    }\r\n    handleNav = (page) => {\r\n        //this.props.history.push(page);\r\n        //this.setState({anchorElement: null, isNavOpen: false});\r\n    }\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {isNavOpen, anchorElement} = this.state;\r\n        return (\r\n            <div className={classes?.root}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar >\r\n                        <IconButton edge=\"start\"  onClick={this.handleMenu} className={classes?.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Menu anchorEl={anchorElement} anchorOrigin={{vertical: 'top', horizontal: 'right'}} keepMounted open={isNavOpen} onClose={this.handleClose}>\r\n                        <LinkMenuItem to=\"/Projects\" onClick={this.handleClose}>Projects</LinkMenuItem>\r\n                        <LinkMenuItem to=\"/Gas\" onClick={this.handleClose}>Gas Money</LinkMenuItem>\r\n                        <LinkMenuItem to=\"/About\" onClick={this.handleClose}>About Me</LinkMenuItem>\r\n                        <LinkMenuItem to=\"/Resume\" onClick={this.handleClose}>Resume</LinkMenuItem>\r\n                        <LinkMenuItem to=\"/\" onClick={this.handleClose}>Home</LinkMenuItem>\r\n                        </Menu>\r\n                        <Typography variant=\"h6\" className={classes?.title}>\r\n                            Elijah Kaufman's Website\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Navigation);","//@flow\r\n\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\ntype State = {\r\n}\r\n\r\ntype Props = {\r\n}\r\n\r\nexport default class Landing extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        };\r\n    }\r\n    render() {\r\n        //const {classes} = this.props;\r\n        //const {isNavOpen, anchorElement} = this.state;\r\n        return (\r\n            <Typography>About Me</Typography>\r\n        );\r\n    }\r\n}\r\n","//@flow\r\n\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\ntype State = {\r\n}\r\n\r\ntype Props = {\r\n}\r\n\r\nexport default class Landing extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        };\r\n    }\r\n    render() {\r\n        //const {classes} = this.props;\r\n        //const {isNavOpen, anchorElement} = this.state;\r\n        return (\r\n            <Typography>Welcome to the landing page</Typography>\r\n        );\r\n    }\r\n}\r\n","//@flow\r\n\r\nimport React from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  DirectionsService,\r\n  DirectionsRenderer\r\n} from \"@react-google-maps/api\";\r\n\r\n//{`Miles: ${(directions.routes['0'].legs[0].distance.value / 1000 * 0.621371).toFixed(2)}`}\r\n//{`Time: ${(directions.routes['0'].legs[0].duration.value / 60).toFixed(2)}`}\r\n\r\ntype State = {\r\n  response: any\r\n};\r\ntype Props = {\r\n  to: string,\r\n  from: string,\r\n  lat: number,\r\n  long: number,\r\n  showMap: boolean,\r\n  AfterDirectionFetch: (cost: number) => void\r\n};\r\n\r\nclass PriceEstimator extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      response: null\r\n    };\r\n  }\r\n  calculateCost = () => {\r\n    const directions = this.state.response;\r\n    let cost = 0;\r\n    if (directions) {\r\n    const miles = (directions.routes['0'].legs[0].distance.value / 1000 * 0.621371).toFixed(2)\r\n    const time = (directions.routes['0'].legs[0].duration.value / 60).toFixed(2)\r\n    cost = (0.35 * parseInt(miles) + 0.3 * parseInt(time) + 5.00);\r\n    }\r\n    return cost.toFixed(2);\r\n  }\r\n  directionsCallback = (newResponse: any) => {\r\n    let cost = 0;\r\n    if (newResponse !== null) {\r\n      if (newResponse.status === \"OK\") {\r\n        this.setState({ response: newResponse }, () => cost = this.calculateCost());\r\n      } else {\r\n        console.log(\"response: \", newResponse);\r\n      }\r\n    }\r\n    \r\n    this.props.AfterDirectionFetch(cost);\r\n  };\r\n  render() {\r\n    const { from, to, showMap } = this.props;\r\n    const directions = this.state.response;\r\n\r\n    let cost;\r\n    if (directions) {\r\n    }\r\n    return (\r\n      <>\r\n        {directions && (\r\n          <>\r\n            <p>{`Miles: ${directions.routes[\"0\"].legs[0].distance.text}`}</p>\r\n            <p>{`Time: ${directions.routes[\"0\"].legs[0].duration.text}`}</p>\r\n          </>\r\n        )}\r\n          <GoogleMap\r\n            id=\"ElyGasMoney\"\r\n            center={{\r\n              lat: this.props.lat,\r\n              lng: this.props.long,\r\n            }}\r\n            zoom={12}\r\n            mapContainerStyle={{ width: \"100%\", height: \"400px\" }}\r\n          >\r\n            {from !== \"\" && to !== \"\" && showMap && (\r\n              <DirectionsService\r\n                options={{\r\n                  destination: to,\r\n                  origin: from,\r\n                  travelMode: \"DRIVING\"\r\n                }}\r\n                callback={this.directionsCallback}\r\n              />\r\n            )}\r\n            {directions !== null && (\r\n              <DirectionsRenderer\r\n                options={{\r\n                  directions: directions\r\n                }}\r\n              />\r\n            )}\r\n          </GoogleMap>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PriceEstimator;\r\n","//@flow\r\n\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {MenuItem} from '@material-ui/core';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport throttle from 'lodash/throttle';\r\n\r\nfunction loadScript(src, position, id) {\r\n  if (!position) {\r\n    return;\r\n  }\r\n\r\n  const script = document.createElement('script');\r\n  script.setAttribute('async', '');\r\n  script.setAttribute('id', id);\r\n  script.src = src;\r\n  position.appendChild(script);\r\n}\r\n\r\nconst autocompleteService: any = { current: null };\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  icon: {\r\n    color: theme.palette.text.secondary,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\ntype Props = {\r\n  label: string,\r\n  onOptionSelect: (place_id: string) => void,\r\n}\r\n\r\nfunction GoogleMapsAutoComplete(props: Props) {\r\n  const classes = useStyles();\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [options, setOptions] = React.useState([]);\r\n  const [selectedOption, setSelected] = React.useState([]);\r\n  let textInput = React.createRef();\r\n  \r\n  if (!autocompleteService.current && window.google) {\r\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\r\n  }\r\n  const handleChange = event => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const fetch = React.useMemo(\r\n    () =>\r\n      throttle((input, callback) => {\r\n        autocompleteService.current.getPlacePredictions(input, callback);\r\n      }, 400),\r\n    [],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!autocompleteService.current && window.google) {\r\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\r\n    }\r\n    if (!autocompleteService.current) {\r\n      return undefined;\r\n    }\r\n\r\n    if (inputValue === '') {\r\n      setOptions([]);\r\n      return undefined;\r\n    }\r\n\r\n    fetch({ input: inputValue }, results => {\r\n      if (active) {\r\n        setOptions(results || []);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [inputValue, fetch]);\r\n\r\n  let optionDict = options.map(option => [option.place_id, option.description, option.structured_formatting])\r\n  return (\r\n    <Autocomplete\r\n      id={\"input\" + props.label}\r\n      options={optionDict}\r\n      getOptionLabel={option => typeof option === \"string\" ? option : option[1]}\r\n      debug\r\n      freeSolo\r\n      style={{width: 300}}\r\n      value={inputValue}\r\n      onChange={(event, newValue) => {\r\n        if (newValue) {\r\n        props.onOptionSelect(newValue[0]);\r\n        setInputValue(newValue)\r\n        }\r\n      }}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label={props.label}\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          fullWidth\r\n         />\r\n      )}\r\n      renderOption={(option, index) => {\r\n        const matches = option[2].main_text_matched_substrings;\r\n        const parts = parse(\r\n          option[2].main_text,\r\n          matches.map(match => [match.offset, match.offset + match.length]),\r\n        );\r\n\r\n        return (\r\n          <Grid container alignItems=\"center\">\r\n            <Grid item>\r\n              <LocationOnIcon className={classes.icon} />\r\n            </Grid>\r\n            <Grid item xs>\r\n              {parts.map((part, index) => (\r\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                  {part.text}\r\n                </span>\r\n              ))}\r\n\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {option[2].secondary_text}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default GoogleMapsAutoComplete;","//@flow\r\n\r\nimport React from \"react\";\r\nimport PriceEstimator from \"../components/PriceEstimator\";\r\nimport {\r\n  Typography,\r\n  IconButton,\r\n  Button,\r\n  Input,\r\n  Paper,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n} from \"@material-ui/core\";\r\nimport GoogleMapsAutoComplete from \"../components/GoogleMapsAutoComplete\";\r\nimport MyLocationIcon from \"@material-ui/icons/MyLocation\";\r\n\r\ntype State = {\r\n  from: string,\r\n  fromLoc: any | null,\r\n  to: string,\r\n  toLoc: any | null,\r\n  destination: string,\r\n  origin: string,\r\n  cost: number,\r\n  lat: number,\r\n  long: number,\r\n  showMap: boolean\r\n};\r\n\r\ntype Props = {\r\n  autocompleteService: any\r\n};\r\n\r\nconst inputFrom = React.createRef();\r\nconst inputTo = React.createRef();\r\n\r\nclass GasMoney extends React.Component<Props, State> {\r\n  autocompleteService = { current: null };\r\n  \r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      from: \"\",\r\n      to: \"\",\r\n      fromLoc: null,\r\n      toLoc: null,\r\n      destination: \"\",\r\n      origin: \"\",\r\n      cost: 0,\r\n      lat: 0,\r\n      long: 0,\r\n      showMap: false\r\n    };\r\n  }\r\n  getLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.setState({\r\n          lat: position.coords.latitude,\r\n          long: position.coords.longitude\r\n        });\r\n      });\r\n    }\r\n  };\r\n  updateMap = () => {\r\n    const { from, to, fromLoc, toLoc } = this.state;\r\n    const org = fromLoc ? fromLoc : from;\r\n    const dest = toLoc ? toLoc : to;\r\n    console.log(org, dest);\r\n\r\n    this.setState({\r\n        origin: org, destination: dest,showMap: true,\r\n    });\r\n  };\r\n  afterDirections = (cost: number) => {\r\n    this.setState({ origin: \"\", destination: \"\", cost });\r\n  };\r\n  setFrom = (newVal: any) => {\r\n    this.setState({ from: newVal });\r\n  };\r\n  setFromCoords = (place: string) => {\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const requestUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${place}&fields=name,geometry&key=AIzaSyCmFG2_lNsVip681FctETIpGuqiFnABTCc`;\r\n\r\n    fetch(proxyurl + requestUrl)\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        this.setState({ fromLoc: data.result.geometry.location });\r\n      })\r\n      .catch(error => {\r\n        return error;\r\n      });\r\n  };\r\n  setTo = (newVal: any) => {\r\n    this.setState({ to: newVal });\r\n  };\r\n  setToCoords = (place: string) => {\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const requestUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${place}&fields=name,geometry&key=AIzaSyCmFG2_lNsVip681FctETIpGuqiFnABTCc`;\r\n\r\n    fetch(proxyurl + requestUrl)\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n          if (data && data.result && data.result.geometry && data.result.geometry.location ){\r\n        this.setState({ toLoc: data.result.geometry.location });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        return error;\r\n      });\r\n  };\r\n  componentDidMount = () => {\r\n    this.getLocation();\r\n    if (typeof window !== \"undefined\") {\r\n      if (!document.querySelector(\"#google-maps\")) {\r\n        if (!this.autocompleteService.current && window.google) {\r\n          this.autocompleteService.current = new window.google.maps.places.AutocompleteService();\r\n        }\r\n        if (!this.autocompleteService.current) {\r\n          console.log(\"auto complete null\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  handleSubmit = (event: any | null) => {\r\n      if (event !== undefined) {\r\n    console.log(\"An essay was submitted:\", event);\r\n    event.preventDefault();\r\n      }\r\n  };\r\n  render() {\r\n    //const {classes} = this.props;\r\n    const { from, to, origin, destination, cost, lat, long } = this.state;\r\n\r\n\r\n    const selectedFrom = this.state.fromLoc;\r\n    console.log(\"Selected\", origin);\r\n    const selectedTo = this.state.toLoc;\r\n    console.log(\"Selected\", destination);\r\n    \r\n\r\n    return (\r\n      <>\r\n      <Paper>\r\n      <Container maxWidth={\"md\"} stlye={{textAlign: \"center\"}}>\r\n      <Container maxWidth={\"sm\"}>\r\n      <Grid>\r\n          <Typography>Gas Money</Typography>\r\n          <Card>\r\n          <br />\r\n          <form>\r\n            <Container>\r\n            <GoogleMapsAutoComplete\r\n              onOptionSelect={this.setFromCoords}\r\n              label={\"From\"}\r\n            />\r\n            <br />\r\n            <GoogleMapsAutoComplete\r\n              onOptionSelect={this.setToCoords}\r\n              label={\"To\"}\r\n            />\r\n            </Container>\r\n            <br />\r\n            <Container maxWidth=\"sm\">\r\n            <Button size=\"m\" variant=\"contained\" color=\"primary\" onClick={() => (this.updateMap())}>Calculate Price</Button>\r\n            \r\n            </Container>\r\n          </form>\r\n          <br />\r\n          </Card>\r\n          <Paper>\r\n          <br />\r\n          <Container maxWidth={\"sm\"}>\r\n          <p>{`cost: ${cost}`}</p>\r\n          <div id=\"mapSomething\" style={{ height: \"400px\" }}>\r\n            <PriceEstimator\r\n              from={origin}\r\n              to={destination}\r\n              lat={lat}\r\n              long={long}\r\n              showMap\r\n              AfterDirectionFetch={this.afterDirections}\r\n            />\r\n          </div>\r\n          </Container>\r\n          </Paper>\r\n          <br />\r\n          </Grid>\r\n          </Container>\r\n        </Container>\r\n        </Paper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GasMoney;\r\n","//@flow\nimport React from 'react';\nimport {Route, Link, Switch, BrowserRouter as Router, withRouter} from 'react-router-dom';\nimport {LoadScript}  from '@react-google-maps/api';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport aboutMe from './pages/aboutMe';\nimport Landing from './pages/landing';\nimport GasMoney from './pages/gasMoney';\n\nfunction App() {\n  \n  return (  \n\n   <Router> \n   <LoadScript\n          id=\"script-loader\"\n          googleMapsApiKey=\"AIzaSyCmFG2_lNsVip681FctETIpGuqiFnABTCc\"\n          libraries={['places']}\n        >\n    <Navigation />\n    <Switch>\n    <Route exact path='/' component={withRouter(Landing)} />\n    <Route path='/About' component={withRouter(aboutMe)} />\n    <Route path='/Gas' component={withRouter(GasMoney)} />\n    \n    </Switch>\n    </LoadScript>\n    </Router>\n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <>\n    <App />\n    </>,\n    \n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}